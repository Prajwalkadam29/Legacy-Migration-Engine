\n# Mapping summary:\n#   - C struct: -> Python class\n#   - C function: -> Python method\n#   - C identifier: -> Python attribute or variable (with camelCase)\n#   - C type: -> Python data type\n\nclass Context:\n    """AST context."""\n\n    def __init__(self, file_ast=None):\n        self.file_ast = file_ast\n        self.func_def = None  # :1:5\n        self.decl = None      # main\n        self.func_decl = None # main\n        self.type_decl = None # main\n        self.identifier_type = None  # main\n        self.compound = None     # :2:1\n        self.func_call = None    # printf\n        self.expr_list = None   # :3:12\n        self.return_stmt = None  # :4:5\n\nclass FunctionDecl(Context):\n    """C function declaration."""\n\n    def __init__(self, file_ast=None, func_def=None):\n        super().__init__(file_ast)\n        self.func_def = func_def\n\n    @property\n    def decl(self):  # main\n        return TypeDecl(main=self)\n\n    @decl.setter\n    def decl(self, value):\n        self._type_decl = value\n\nclass Typedef(Context):\n    """C type definition."""\n\n    def __init__(self, identifier_type=None):\n        super().__init__()\n        self.identifier_type = identifier_type\n\nclass IdentifierType(Typedef):\n    """C identifier type."""\n\n    pass  # :1:1\n\nclass Compound(Context):\n    """C compound statement."""\n\n    def __init__(self, file_ast=None, compound=None):\n        super().__init__(file_ast)\n        self.compound = compound\n\n    @property\n    def func_call(self):  # printf\n        return FuncCall(name=\'printf\')\n\n    @func_call.setter\n    def func_call(self, value):\n        self._expr_list = value\n\nclass ExprList(Context):\n    """C expression list."""\n\n    def __init__(self, file_ast=None, expr_list=None):\n        super().__init__(file_ast)\n        self.expr_list = expr_list\n\n    @property\n    def return_stmt(self):  # :4:5\n        return Constant(val="Hello")\n\nclass FuncCall(Context):\n    """C function call."""\n\nclass TypeDecl(Context):\n    """C type declaration."""\n\n    def __init__(self, identifier_type=None):\n        super().__init__()\n        self.identifier_type = identifier_type\n\nclass ContextManager:\n    """Context manager for AST."""\n\n    def __init__(self):\n        self.file_ast = None\n        self.func_def = FunctionDecl()\n        self.decl = None\n        self.func_decl = FunctionDecl(self.func_def)\n        self.type_decl = Typedef(IdentifierType())\n        self.identifier_type = TypeDecl(self.type_decl.identifier_type)\n        self.compound = Compound()\n        self.func_call = FuncCall()\n        self.expr_list = ExprList(compound=self.compound, func_call=self.func_call)\n        self.return_stmt = Constant(val="Hello")\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass\n\ndef main():\n    with ContextManager() as ctx:\n        print(ctx.identifier_type.decl)\n\nif __name__ == "__main__":\n    main()\n